{"ast":null,"code":"import Peer from 'simple-peer';\nimport socketIOClient from \"socket.io-client\";\nimport { Video } from './style';\n\nfunction addPeer(incomingSignal, callerID, stream, socket) {\n  console.log('incomingSignal:', incomingSignal);\n  console.log('=> addPeer:');\n  const peer = new Peer({\n    initiator: false,\n    trickle: false,\n    stream\n  });\n  peer.on(\"signal\", signal => {\n    socket.emit(\"room/signal-back\", {\n      signal,\n      callerID\n    });\n  });\n  peer.signal(incomingSignal);\n  return peer;\n}\n\nconst createPeer = (userToSignal, callerID, stream, socket) => {\n  console.log('=> createPeer:');\n  const peer = new Peer({\n    initiator: true,\n    trickle: false,\n    stream\n  });\n  peer.on(\"signal\", signal => {\n    socket.emit(\"room/signal\", {\n      userToSignal,\n      callerID,\n      signal\n    });\n  });\n  return peer;\n};\n\nconst updateRoom = ({\n  users,\n  peersRef,\n  setPeers,\n  socket,\n  stream\n}) => {\n  console.log('=> updateRoom');\n  const peers = [];\n  console.log('users:', users);\n  users.forEach(user => {\n    const peer = createPeer(user.socket_id, socket.id, stream, socket);\n    peersRef.current.push({\n      peerID: user.socket_id,\n      peer\n    });\n    peers.push(peer);\n  });\n  setPeers(peers);\n};\n\nconst userJoined = ({\n  peers,\n  payload,\n  stream,\n  peersRef,\n  setPeers,\n  socket\n}) => {\n  console.log('=> userJoined ');\n  const peer = addPeer(payload.signal, payload.callerID, stream, socket);\n  peersRef.current.push({\n    peerID: payload.callerID,\n    peer\n  });\n  setPeers([...peers, peer]);\n};\n\nconst answerBack = ({\n  payload,\n  peersRef\n}) => {\n  console.log('=> answerBack ');\n  const item = peersRef.current.find(p => p.peerID === payload.id);\n  item.peer.signal(payload.signal);\n};\n\nexport const joinStream = async ({\n  setId,\n  peers,\n  setMyStream,\n  peersRef,\n  setPeers\n}) => {\n  console.log('=> joinStream ');\n  const socket = await socketIOClient('http://localhost:4200');\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: {\n      width: {\n        min: 1024,\n        ideal: 1280,\n        max: 1920\n      },\n      height: {\n        min: 576,\n        ideal: 720,\n        max: 1080\n      }\n    }\n  });\n  socket.emit('room/set-visitant', {\n    stream_id: stream.id\n  });\n  console.log('socket:', socket.id);\n  setId(socket.id);\n  setMyStream(stream);\n  socket.on('room/update', users => updateRoom({\n    users,\n    peersRef,\n    setPeers,\n    socket,\n    stream\n  }));\n  socket.on('room/user-joined', payload => userJoined({\n    payload,\n    stream,\n    peersRef,\n    setPeers,\n    socket,\n    peers\n  }));\n  socket.on('room/signal-answer-back', payload => answerBack({\n    payload,\n    stream,\n    peersRef,\n    setPeers,\n    socket\n  })); // socket.on('BackAnswer', () => console.log('BackAnswer'))\n  // socket.on('SessionActive', () => console.log('SessionActive'))\n  // socket.on('Disconnect', () => console.log('Disconnect'))\n  // socket.on('close-con', (data) => console.log('AHHHHHHHHH', data))\n}; // const startPeer = (init, stream, setStreamers, streamers) => {\n//   var peer = new Peer({ initiator: init, stream, trickle: false });\n//   const videoContainer = document.getElementById('video-container');\n//   const video = document.createElement('video');\n//   video.classList.add('videozin');\n//   video.autoplay = true;\n//   video.controls = true;\n//   peer.on('stream', (stream) => {\n//     video.srcObject = stream;\n//     video.id = stream.id;\n//     console.log('video:', [video]);\n//     videoContainer.appendChild(video);\n//     setStreamers([...streamers, stream])\n//   });\n//   return peer;\n// }\n// const conectPeer = (init, stream, socket, setStreamers, streamers) => {\n//   console.log('makePeer:')\n//   const peer = startPeer(init, stream);\n//   peer.on('signal', function (data) {\n//     console.log('ON - signal make peer:');\n//     socket.emit('Offer', data)\n//   });\n// }\n// const frontAnswer = (offer, stream, socket, setStreamers, streamers) => {\n//   let peer = startPeer(false, stream, setStreamers, streamers)\n//   peer.on('signal', (data) => {\n//       socket.emit('Answer', data)\n//   })\n//   peer.signal(offer)\n// }","map":null,"metadata":{},"sourceType":"module"}